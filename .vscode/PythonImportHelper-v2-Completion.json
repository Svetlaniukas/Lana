[
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "sqlite3",
        "description": "sqlite3",
        "isExtraImport": true,
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "JSONDecodeError",
        "importPath": "json",
        "description": "json",
        "isExtraImport": true,
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "my_function",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "my_function",
        "description": "my_function",
        "detail": "my_function",
        "documentation": {}
    },
    {
        "label": "calendar",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "calendar",
        "description": "calendar",
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "mymodule",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mymodule",
        "description": "mymodule",
        "detail": "mymodule",
        "documentation": {}
    },
    {
        "label": "xml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml",
        "description": "xml",
        "detail": "xml",
        "documentation": {}
    },
    {
        "label": "xml.etree.ElementTree",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "Dictionary",
        "kind": 6,
        "importPath": "test_function.my_db_testing",
        "description": "test_function.my_db_testing",
        "peekOfCode": "class Dictionary:\n    db_name = 'dictionary.db'\n    def __init__(self, window):\n        self.wind = window\n        self.wind.title('Редактирование словаря')\n        # создание элементов для ввода слов и значений\n        frame = LabelFrame(self.wind, text='Введите новое слово')\n        frame.grid(row=0, column=0, columnspan=3, pady=20)\n        Label(frame, text='Слово: ').grid(row=1, column=0)\n        self.word = Entry(frame)",
        "detail": "test_function.my_db_testing",
        "documentation": {}
    },
    {
        "label": "create_connection",
        "kind": 2,
        "importPath": "test_function.my_db_testing",
        "description": "test_function.my_db_testing",
        "peekOfCode": "def create_connection(db_file):\n    conn = None\n    try:\n        conn = sqlite3.connect(db_file)\n        return conn\n    except Error as e:\n        print(e)\n    return conn\ndef create_table(conn, create_table_sql):\n    try:",
        "detail": "test_function.my_db_testing",
        "documentation": {}
    },
    {
        "label": "create_table",
        "kind": 2,
        "importPath": "test_function.my_db_testing",
        "description": "test_function.my_db_testing",
        "peekOfCode": "def create_table(conn, create_table_sql):\n    try:\n        c = conn.cursor()\n        c.execute(create_table_sql)\n    except Error as e:\n        print(e)\ndef main():\n    database = r\"file_name\"\n    # описание столбцов словаря - id номер, слово и значение\n    sql_create_dictionary_table = \"\"\" CREATE TABLE IF NOT EXISTS dictionary (",
        "detail": "test_function.my_db_testing",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "test_function.my_db_testing",
        "description": "test_function.my_db_testing",
        "peekOfCode": "def main():\n    database = r\"file_name\"\n    # описание столбцов словаря - id номер, слово и значение\n    sql_create_dictionary_table = \"\"\" CREATE TABLE IF NOT EXISTS dictionary (\n                                        id integer PRIMARY KEY,\n                                        word text,\n                                        meaning text\n                                    ); \"\"\"\n    # подключение к базе\n    conn = create_connection(database)",
        "detail": "test_function.my_db_testing",
        "documentation": {}
    },
    {
        "label": "run_query",
        "kind": 2,
        "importPath": "test_function.my_db_testing",
        "description": "test_function.my_db_testing",
        "peekOfCode": "def run_query(self, query, parameters=()):\n    with sqlite3.connect(self.db_name) as conn:\n        cursor = conn.cursor()\n        result = cursor.execute(query, parameters)\n        conn.commit()\n    # запрос на извлечение всех существующих записей из базы в алфавитном порядке\ndef get_words(self):\n        query = 'SELECT * FROM dictionary ORDER BY word DESC'\n        db_rows = self.run_query(query)\n        # формирование словаря из перемешанных в случайном порядке слов и их значений",
        "detail": "test_function.my_db_testing",
        "documentation": {}
    },
    {
        "label": "get_words",
        "kind": 2,
        "importPath": "test_function.my_db_testing",
        "description": "test_function.my_db_testing",
        "peekOfCode": "def get_words(self):\n        query = 'SELECT * FROM dictionary ORDER BY word DESC'\n        db_rows = self.run_query(query)\n        # формирование словаря из перемешанных в случайном порядке слов и их значений\n        lst_left, lst_right = [], []\n        for row in db_rows:\n            lst_left.append(row[1])\n            lst_right.append(row[2])\n        random.shuffle(lst_left)\n        random.shuffle(lst_right)",
        "detail": "test_function.my_db_testing",
        "documentation": {}
    },
    {
        "label": "edit_word",
        "kind": 2,
        "importPath": "test_function.my_db_testing",
        "description": "test_function.my_db_testing",
        "peekOfCode": "def edit_word(self):\n    self.message['text'] = ''\n    try:\n        self.tree.item(self.tree.selection())['values'][0]\n    except IndexError as e:\n        self.message['text'] = 'Выберите слово для изменения'\n        return\n    word = self.tree.item(self.tree.selection())['text']\n    old_meaning = self.tree.item(self.tree.selection())['values'][0]\n    self.edit_wind = Toplevel()",
        "detail": "test_function.my_db_testing",
        "documentation": {}
    },
    {
        "label": "edit_records",
        "kind": 2,
        "importPath": "test_function.my_db_testing",
        "description": "test_function.my_db_testing",
        "peekOfCode": "def edit_records(self, new_word, word, new_meaning, old_meaning):\n    query = 'UPDATE dictionary SET word = ?, meaning = ? WHERE word = ? AND meaning = ?'\n    parameters = (new_word, new_meaning, word, old_meaning)\n    self.run_query(query, parameters)\n    self.edit_wind.destroy()\n    self.message['text'] = 'слово {} успешно изменено'.format(word)\n    self.get_words()\nif __name__ == '__main__':\n   window = Tk()\napplication = Dictionary(window)",
        "detail": "test_function.my_db_testing",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "test_function.my_db_testing",
        "description": "test_function.my_db_testing",
        "peekOfCode": "application = Dictionary(window)",
        "detail": "test_function.my_db_testing",
        "documentation": {}
    },
    {
        "label": "cinema",
        "kind": 2,
        "importPath": "test_function.my_function",
        "description": "test_function.my_function",
        "peekOfCode": "def cinema(actor, stars):\n    result = f'Movie: \"{actor}\", rating: {stars}'\n    print(result)\n    return result\ndef cinema_tomorrow(movie, rating):\n    result = f'Movie: \"{movie}\", rating: {rating}'\n    print(result)\n    return result\ndef cinema_today(movie, rating):\n    result = f'Movie: \"{movie}\", rating: {rating}'",
        "detail": "test_function.my_function",
        "documentation": {}
    },
    {
        "label": "cinema_tomorrow",
        "kind": 2,
        "importPath": "test_function.my_function",
        "description": "test_function.my_function",
        "peekOfCode": "def cinema_tomorrow(movie, rating):\n    result = f'Movie: \"{movie}\", rating: {rating}'\n    print(result)\n    return result\ndef cinema_today(movie, rating):\n    result = f'Movie: \"{movie}\", rating: {rating}'\n    print(result)\n    return result\ndef staff_id(actor, surname, stars):\n    result = f'name: \"{actor}\", surname: {surname}, rating: {stars}'",
        "detail": "test_function.my_function",
        "documentation": {}
    },
    {
        "label": "cinema_today",
        "kind": 2,
        "importPath": "test_function.my_function",
        "description": "test_function.my_function",
        "peekOfCode": "def cinema_today(movie, rating):\n    result = f'Movie: \"{movie}\", rating: {rating}'\n    print(result)\n    return result\ndef staff_id(actor, surname, stars):\n    result = f'name: \"{actor}\", surname: {surname}, rating: {stars}'\n    print(result)\n    return result\ndef plius(a, b):\n    result = int(a + b)",
        "detail": "test_function.my_function",
        "documentation": {}
    },
    {
        "label": "staff_id",
        "kind": 2,
        "importPath": "test_function.my_function",
        "description": "test_function.my_function",
        "peekOfCode": "def staff_id(actor, surname, stars):\n    result = f'name: \"{actor}\", surname: {surname}, rating: {stars}'\n    print(result)\n    return result\ndef plius(a, b):\n    result = int(a + b)\n    print(result)\n    return result\ndef minus(a, c):\n    result = int(a - c)",
        "detail": "test_function.my_function",
        "documentation": {}
    },
    {
        "label": "plius",
        "kind": 2,
        "importPath": "test_function.my_function",
        "description": "test_function.my_function",
        "peekOfCode": "def plius(a, b):\n    result = int(a + b)\n    print(result)\n    return result\ndef minus(a, c):\n    result = int(a - c)\n    print(result)\n    return result\ndef multi(a, c):\n    result = int(a * c)",
        "detail": "test_function.my_function",
        "documentation": {}
    },
    {
        "label": "minus",
        "kind": 2,
        "importPath": "test_function.my_function",
        "description": "test_function.my_function",
        "peekOfCode": "def minus(a, c):\n    result = int(a - c)\n    print(result)\n    return result\ndef multi(a, c):\n    result = int(a * c)\n    print(result)\n    return result\ndef divide(a, b):\n    result = int(a / b)",
        "detail": "test_function.my_function",
        "documentation": {}
    },
    {
        "label": "multi",
        "kind": 2,
        "importPath": "test_function.my_function",
        "description": "test_function.my_function",
        "peekOfCode": "def multi(a, c):\n    result = int(a * c)\n    print(result)\n    return result\ndef divide(a, b):\n    result = int(a / b)\n    print(result)\n    return result\ndef staff_book(name, surname):\n    result = f'First name:\"{name}\", Second name:\"{surname}\"'",
        "detail": "test_function.my_function",
        "documentation": {}
    },
    {
        "label": "divide",
        "kind": 2,
        "importPath": "test_function.my_function",
        "description": "test_function.my_function",
        "peekOfCode": "def divide(a, b):\n    result = int(a / b)\n    print(result)\n    return result\ndef staff_book(name, surname):\n    result = f'First name:\"{name}\", Second name:\"{surname}\"'\n    print(result)\n    return result\ndef sum_not_exist(a, b):\n    result = (a + b) + 12",
        "detail": "test_function.my_function",
        "documentation": {}
    },
    {
        "label": "staff_book",
        "kind": 2,
        "importPath": "test_function.my_function",
        "description": "test_function.my_function",
        "peekOfCode": "def staff_book(name, surname):\n    result = f'First name:\"{name}\", Second name:\"{surname}\"'\n    print(result)\n    return result\ndef sum_not_exist(a, b):\n    result = (a + b) + 12\n    print(result)\n    return result",
        "detail": "test_function.my_function",
        "documentation": {}
    },
    {
        "label": "sum_not_exist",
        "kind": 2,
        "importPath": "test_function.my_function",
        "description": "test_function.my_function",
        "peekOfCode": "def sum_not_exist(a, b):\n    result = (a + b) + 12\n    print(result)\n    return result",
        "detail": "test_function.my_function",
        "documentation": {}
    },
    {
        "label": "str_json",
        "kind": 5,
        "importPath": "test_function.my_json_testing",
        "description": "test_function.my_json_testing",
        "peekOfCode": "str_json = \"\"\"\n{\n  \"weekday\": {\n    \"Monday\": \"10.am-4.pm\",\n    \"Tuesday\": \"9.am-3.pm\",\n    \"Wednesday\": \"10.am-5.pm\",\n    \"Thursday\": \"10am-4pm\",\n    \"Friday\": \"8am-4pm\"\n},\n  \"weekend\": {",
        "detail": "test_function.my_json_testing",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "test_function.my_json_testing",
        "description": "test_function.my_json_testing",
        "peekOfCode": "data = json.loads(str_json)\nprint(type(data))\nvalue_week = data['weekday']['Monday']\nprint(value_week)\nvalue_week1 = data['weekend']['Sunday']\nprint(value_week1)\nwith open('../staff.json', 'r') as file:\n    json.dump(data, file, indent=3)",
        "detail": "test_function.my_json_testing",
        "documentation": {}
    },
    {
        "label": "value_week",
        "kind": 5,
        "importPath": "test_function.my_json_testing",
        "description": "test_function.my_json_testing",
        "peekOfCode": "value_week = data['weekday']['Monday']\nprint(value_week)\nvalue_week1 = data['weekend']['Sunday']\nprint(value_week1)\nwith open('../staff.json', 'r') as file:\n    json.dump(data, file, indent=3)",
        "detail": "test_function.my_json_testing",
        "documentation": {}
    },
    {
        "label": "value_week1",
        "kind": 5,
        "importPath": "test_function.my_json_testing",
        "description": "test_function.my_json_testing",
        "peekOfCode": "value_week1 = data['weekend']['Sunday']\nprint(value_week1)\nwith open('../staff.json', 'r') as file:\n    json.dump(data, file, indent=3)",
        "detail": "test_function.my_json_testing",
        "documentation": {}
    },
    {
        "label": "work_with2_sql_lite_db_files",
        "kind": 2,
        "importPath": "test_function.my_xml_testing",
        "description": "test_function.my_xml_testing",
        "peekOfCode": "def work_with2_sql_lite_db_files(file_name, key_name, val_name):\n    db_dict = {}\n    try:\n        con = sqlite3.connect(file_name)\n        con.row_factory = sqlite3.Row\n        cur = con.cursor()\n        for keys in cur:\n            dict = cur.execute()\n            if key_name in dict and val_name in dict():\n                key = keys[key_name]",
        "detail": "test_function.my_xml_testing",
        "documentation": {}
    },
    {
        "label": "work1_with_sql_lite_db_files",
        "kind": 2,
        "importPath": "test_function.my_xml_testing",
        "description": "test_function.my_xml_testing",
        "peekOfCode": "def work1_with_sql_lite_db_files(key_name, val_name):\n    db_dict = {}\n    try:\n        con = sqlite3.connect()\n        con.row_factory = sqlite3.Row\n        cur = con.cursor()\n        for keys in cur:\n            if key_name and val_name in cur():\n                key = keys[key_name]\n                val = keys[val_name]",
        "detail": "test_function.my_xml_testing",
        "documentation": {}
    },
    {
        "label": "test_cinema_movie_name_rating",
        "kind": 2,
        "importPath": "test_function.test_function",
        "description": "test_function.test_function",
        "peekOfCode": "def test_cinema_movie_name_rating():\n    assert my_function.cinema('Alien', 200) == 'Movie: \"Alien\", rating: 200'\n    assert my_function.cinema('Big', 10) == 'Movie: \"Big\", rating: 10'\n    assert my_function.cinema('Booo', 20) == 'Movie: \"Booo\", rating: 20'\n    assert my_function.cinema('', 40) != 'Movie: \"Big\", rating: 10'\ndef test_cinema_today():\n    assert my_function.cinema_today(\n        'Terminator', 30) == 'Movie: \"Terminator\", rating: 30'\n    assert my_function.cinema_today(\n        'Hello friend', 200) == 'Movie: \"Hello friend\", rating: 200'",
        "detail": "test_function.test_function",
        "documentation": {}
    },
    {
        "label": "test_cinema_today",
        "kind": 2,
        "importPath": "test_function.test_function",
        "description": "test_function.test_function",
        "peekOfCode": "def test_cinema_today():\n    assert my_function.cinema_today(\n        'Terminator', 30) == 'Movie: \"Terminator\", rating: 30'\n    assert my_function.cinema_today(\n        'Hello friend', 200) == 'Movie: \"Hello friend\", rating: 200'\n    assert my_function.cinema_today(\n        '', 45) != 'Movie: \"Big\", rating: 80'\ndef test_movie_tomorrow():\n    assert my_function.cinema_tomorrow(\n        'Sunny', 300) == 'Movie: \"Sunny\", rating: 300'",
        "detail": "test_function.test_function",
        "documentation": {}
    },
    {
        "label": "test_movie_tomorrow",
        "kind": 2,
        "importPath": "test_function.test_function",
        "description": "test_function.test_function",
        "peekOfCode": "def test_movie_tomorrow():\n    assert my_function.cinema_tomorrow(\n        'Sunny', 300) == 'Movie: \"Sunny\", rating: 300'\n    assert my_function.cinema_tomorrow(\n        'Sunny', 400) != 'Movie: \"Sunny\", rating: 300'\ndef test_sum_plius():\n    assert my_function.plius(5, 7) == 12\n    assert my_function.plius(10, 20) == 30\n    assert my_function.plius(10, 20) != 12\ndef test_sum_minus():",
        "detail": "test_function.test_function",
        "documentation": {}
    },
    {
        "label": "test_sum_plius",
        "kind": 2,
        "importPath": "test_function.test_function",
        "description": "test_function.test_function",
        "peekOfCode": "def test_sum_plius():\n    assert my_function.plius(5, 7) == 12\n    assert my_function.plius(10, 20) == 30\n    assert my_function.plius(10, 20) != 12\ndef test_sum_minus():\n    assert my_function.minus(10, 2) == 8\n    assert my_function.minus(9, 2) != 12\ndef test_sum_multiplay():\n    assert my_function.multi(10, 5) == 50\n    assert my_function.multi(9, 2) != 20",
        "detail": "test_function.test_function",
        "documentation": {}
    },
    {
        "label": "test_sum_minus",
        "kind": 2,
        "importPath": "test_function.test_function",
        "description": "test_function.test_function",
        "peekOfCode": "def test_sum_minus():\n    assert my_function.minus(10, 2) == 8\n    assert my_function.minus(9, 2) != 12\ndef test_sum_multiplay():\n    assert my_function.multi(10, 5) == 50\n    assert my_function.multi(9, 2) != 20\n    assert my_function.multi(1, 5) != 50\ndef test_num_divide():\n    assert my_function.divide(10, 2) == 5\n    assert my_function.divide(20, 2) == 10",
        "detail": "test_function.test_function",
        "documentation": {}
    },
    {
        "label": "test_sum_multiplay",
        "kind": 2,
        "importPath": "test_function.test_function",
        "description": "test_function.test_function",
        "peekOfCode": "def test_sum_multiplay():\n    assert my_function.multi(10, 5) == 50\n    assert my_function.multi(9, 2) != 20\n    assert my_function.multi(1, 5) != 50\ndef test_num_divide():\n    assert my_function.divide(10, 2) == 5\n    assert my_function.divide(20, 2) == 10\ndef test_staff_book():\n    assert my_function.staff_book(\n        'Tania', 'Bal'",
        "detail": "test_function.test_function",
        "documentation": {}
    },
    {
        "label": "test_num_divide",
        "kind": 2,
        "importPath": "test_function.test_function",
        "description": "test_function.test_function",
        "peekOfCode": "def test_num_divide():\n    assert my_function.divide(10, 2) == 5\n    assert my_function.divide(20, 2) == 10\ndef test_staff_book():\n    assert my_function.staff_book(\n        'Tania', 'Bal'\n    ) == 'First name:\"Tania\", Second name:\"Bal\"'\n    assert my_function.staff_book(\n        'Lena', 'Ross'\n        ) == 'First name:\"Lena\", Second name:\"Ross\"'",
        "detail": "test_function.test_function",
        "documentation": {}
    },
    {
        "label": "test_staff_book",
        "kind": 2,
        "importPath": "test_function.test_function",
        "description": "test_function.test_function",
        "peekOfCode": "def test_staff_book():\n    assert my_function.staff_book(\n        'Tania', 'Bal'\n    ) == 'First name:\"Tania\", Second name:\"Bal\"'\n    assert my_function.staff_book(\n        'Lena', 'Ross'\n        ) == 'First name:\"Lena\", Second name:\"Ross\"'\ndef Test_string_should_failed():\n    with pytest.raises(ZeroDivisionError):\n        assert my_function.staff_book(\"A\", \"B\")",
        "detail": "test_function.test_function",
        "documentation": {}
    },
    {
        "label": "Test_string_should_failed",
        "kind": 2,
        "importPath": "test_function.test_function",
        "description": "test_function.test_function",
        "peekOfCode": "def Test_string_should_failed():\n    with pytest.raises(ZeroDivisionError):\n        assert my_function.staff_book(\"A\", \"B\")",
        "detail": "test_function.test_function",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def home():\n    date_time = datetime.now()\n    calendar_year = calendar.TextCalendar()\n    page_content = render_template(\"home.html\",\n                                   current_time=date_time,\n                                   calendar_year=calendar_year.formatyear(\n                                       2023, w=2, l=1, c=6, m=3)\n                                   )\n    return page_content\n@app.route('/staff')",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "staff",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def staff():\n    for_week_days_shift = mymodule.work_with_db_json_staff_shift(\n        \"staff.json\", 'weekday')\n    for_staff_weekend_shift = mymodule.work_with_db_xml_staff_shift(\n        \"staff_weekend.xml\", 'day', 'time')\n    page_content = render_template(\n        \"staff.html\",\n        for_week_days_shift=for_week_days_shift,\n        for_staff_weekend_shift=for_staff_weekend_shift\n        )",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/')\n@app.route('/home')\ndef home():\n    date_time = datetime.now()\n    calendar_year = calendar.TextCalendar()\n    page_content = render_template(\"home.html\",\n                                   current_time=date_time,\n                                   calendar_year=calendar_year.formatyear(\n                                       2023, w=2, l=1, c=6, m=3)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "time_table",
        "kind": 5,
        "importPath": "my_sql_lite_db",
        "description": "my_sql_lite_db",
        "peekOfCode": "time_table = [\n         (\"Monday\", \"10.am-4.pm\"),\n         (\"Tuesday\", \"9.am-3.pm\"),\n         (\"Wednesday\", \"10.am-5.pm\"),\n         (\"Thursday\", \"10am-4pm\"),\n         (\"Friday\", \"8am-4pm\"),\n         (\"Saturday\", \"10.am-5.pm\"),\n         (\"Sunday\", \"8am- 4pm\")\n]\ncon = sqlite3.connect(\"staff_shift.db\")",
        "detail": "my_sql_lite_db",
        "documentation": {}
    },
    {
        "label": "con",
        "kind": 5,
        "importPath": "my_sql_lite_db",
        "description": "my_sql_lite_db",
        "peekOfCode": "con = sqlite3.connect(\"staff_shift.db\")\ntry:\n    cur = con.cursor()\n    cur.execute(\"SELECT * FROM time_table\")\n    print(cur.fetchall())\n    print('test')\n    cur.execute(\"DROP TABLE IF EXISTS time_table\")\n    cur.execute(\"\"\"CREATE TABLE IF NOT EXISTS time_table (\n        user_id INTEGER PRIMARY KEY AUTOINCREMENT,\n        day TEXT,",
        "detail": "my_sql_lite_db",
        "documentation": {}
    },
    {
        "label": "open_staff_file",
        "kind": 2,
        "importPath": "mymodule",
        "description": "mymodule",
        "peekOfCode": "def open_staff_file(file_name, file_delimiter):\n    dict_staff = {}\n    try:\n        for_staff_file = open(file_name, \"r\", encoding=\"utf-8\")\n        for line in for_staff_file:\n            if file_delimiter in line:\n                (key, val) = line.split(file_delimiter)\n                key.strip()\n                val.strip('\\n')\n                key.strip()",
        "detail": "mymodule",
        "documentation": {}
    },
    {
        "label": "work_with_db_xml_staff_shift",
        "kind": 2,
        "importPath": "mymodule",
        "description": "mymodule",
        "peekOfCode": "def work_with_db_xml_staff_shift(file_name, key_name, val_name):\n    xml_dict = {}\n    try:\n        tree = ET.parse(file_name)\n        element = tree.iter()\n        for child in element:\n            keys = child.attrib.keys()\n            if key_name in keys and val_name in keys:\n                key = child.attrib[key_name]\n                val = child.attrib[val_name]",
        "detail": "mymodule",
        "documentation": {}
    },
    {
        "label": "work_with_db_json_staff_shift",
        "kind": 2,
        "importPath": "mymodule",
        "description": "mymodule",
        "peekOfCode": "def work_with_db_json_staff_shift(file_name, root_node_name):\n    json_dict = {}\n    file_object = open(file_name, encoding=\"utf-8\")\n    try:\n        json_dict = json.load(file_object)\n    except JSONDecodeError:\n        return {}\n    if root_node_name not in json_dict.keys():\n        return {}\n    return json_dict[root_node_name]",
        "detail": "mymodule",
        "documentation": {}
    },
    {
        "label": "work_with_sql_lite_db_files",
        "kind": 2,
        "importPath": "mymodule",
        "description": "mymodule",
        "peekOfCode": "def work_with_sql_lite_db_files(file_name, select_query, key_name, val_name):\n    db_dict = {}\n    try:\n        with sqlite3.connect(file_name) as mydict:\n            cursor = mydict.cursor()\n            select_query = \"SELECT {},{} FROM {}\".format(select_query,\n                                                         key_name, val_name)\n            cursor.execute(select_query)\n            mydict = cursor.fetchall()\n            for row in mydict:",
        "detail": "mymodule",
        "documentation": {}
    },
    {
        "label": "NAME",
        "kind": 5,
        "importPath": "mymodule",
        "description": "mymodule",
        "peekOfCode": "NAME = \"mymodule\"\n\"\"\"\n    function is open files an return dictionary\n\"\"\"\ndef open_staff_file(file_name, file_delimiter):\n    dict_staff = {}\n    try:\n        for_staff_file = open(file_name, \"r\", encoding=\"utf-8\")\n        for line in for_staff_file:\n            if file_delimiter in line:",
        "detail": "mymodule",
        "documentation": {}
    },
    {
        "label": "test_index_contain_route",
        "kind": 2,
        "importPath": "test_mymodel_app",
        "description": "test_mymodel_app",
        "peekOfCode": "def test_index_contain_route():\n    response = app.test_client().get('/')\n    assert 'A lot of people ask where we got our name' in response.data.decode(\n        'utf-8')\ndef test_index_contain_main_title_name():\n    response = app.test_client().get('/home')\n    print(response.data)\n    assert response.status_code == 200\n    assert 'New Look Hair Design' in response.data.decode('utf-8')\n@pytest.mark.parametrize(",
        "detail": "test_mymodel_app",
        "documentation": {}
    },
    {
        "label": "test_index_contain_main_title_name",
        "kind": 2,
        "importPath": "test_mymodel_app",
        "description": "test_mymodel_app",
        "peekOfCode": "def test_index_contain_main_title_name():\n    response = app.test_client().get('/home')\n    print(response.data)\n    assert response.status_code == 200\n    assert 'New Look Hair Design' in response.data.decode('utf-8')\n@pytest.mark.parametrize(\n    \"day\", ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n    )\ndef test_index_contain_staff_shift_week_day(day):\n    response = app.test_client().get('/staff')",
        "detail": "test_mymodel_app",
        "documentation": {}
    },
    {
        "label": "test_index_contain_staff_shift_week_day",
        "kind": 2,
        "importPath": "test_mymodel_app",
        "description": "test_mymodel_app",
        "peekOfCode": "def test_index_contain_staff_shift_week_day(day):\n    response = app.test_client().get('/staff')\n    print(f'\"{day}\"')\n    assert 'Monday' in response.data.decode('utf-8')\n@pytest.mark.parametrize(\"weekend\", ['Saturday', 'Sunday'])\ndef test_index_contain_staff_shift_weekend(weekend):\n    response = app.test_client().get('/staff')\n    print(f'\"{weekend}\"')\n    assert 'Sunday' in response.data.decode('utf-8')",
        "detail": "test_mymodel_app",
        "documentation": {}
    },
    {
        "label": "test_index_contain_staff_shift_weekend",
        "kind": 2,
        "importPath": "test_mymodel_app",
        "description": "test_mymodel_app",
        "peekOfCode": "def test_index_contain_staff_shift_weekend(weekend):\n    response = app.test_client().get('/staff')\n    print(f'\"{weekend}\"')\n    assert 'Sunday' in response.data.decode('utf-8')",
        "detail": "test_mymodel_app",
        "documentation": {}
    },
    {
        "label": "work_with_db_json_staff_shift",
        "kind": 2,
        "importPath": "test_mymodul_json",
        "description": "test_mymodul_json",
        "peekOfCode": "def work_with_db_json_staff_shift():\n    assert mymodule.NAME == \"mymodule\"\ndef test_empty_json_shut_return_empty_dictionary():\n    dict_empty = mymodule.work_with_db_json_staff_shift(\n        \"staff_empty_file.json\", ''\n    )\n    assert len(dict_empty) == 0\ndef test_not_empty_json_shut_retur_not_emthy_dictionary():\n    file_with_data = mymodule.work_with_db_json_staff_shift(\n        \"staff.json\", 'weekday'",
        "detail": "test_mymodul_json",
        "documentation": {}
    },
    {
        "label": "test_empty_json_shut_return_empty_dictionary",
        "kind": 2,
        "importPath": "test_mymodul_json",
        "description": "test_mymodul_json",
        "peekOfCode": "def test_empty_json_shut_return_empty_dictionary():\n    dict_empty = mymodule.work_with_db_json_staff_shift(\n        \"staff_empty_file.json\", ''\n    )\n    assert len(dict_empty) == 0\ndef test_not_empty_json_shut_retur_not_emthy_dictionary():\n    file_with_data = mymodule.work_with_db_json_staff_shift(\n        \"staff.json\", 'weekday'\n    )\n    assert len(file_with_data) == 5",
        "detail": "test_mymodul_json",
        "documentation": {}
    },
    {
        "label": "test_not_empty_json_shut_retur_not_emthy_dictionary",
        "kind": 2,
        "importPath": "test_mymodul_json",
        "description": "test_mymodul_json",
        "peekOfCode": "def test_not_empty_json_shut_retur_not_emthy_dictionary():\n    file_with_data = mymodule.work_with_db_json_staff_shift(\n        \"staff.json\", 'weekday'\n    )\n    assert len(file_with_data) == 5\ndef test_json_valid_shut_return_valid_dictionary():\n    pass\n    persons = mymodule.work_with_db_json_staff_shift(\"staff_name_surname.json\",\n                                                     'person')\n    assert persons['Denis'] == 'Petrov'",
        "detail": "test_mymodul_json",
        "documentation": {}
    },
    {
        "label": "test_json_valid_shut_return_valid_dictionary",
        "kind": 2,
        "importPath": "test_mymodul_json",
        "description": "test_mymodul_json",
        "peekOfCode": "def test_json_valid_shut_return_valid_dictionary():\n    pass\n    persons = mymodule.work_with_db_json_staff_shift(\"staff_name_surname.json\",\n                                                     'person')\n    assert persons['Denis'] == 'Petrov'\n    assert persons['Tania'] == 'Bal'\n    assert persons['Lana'] == 'Mel'\ndef test_json_shut_retur_valid_dictionary():\n    valid_dictionary = mymodule.work_with_db_json_staff_shift(\n        \"staff_position.json\", 'person'",
        "detail": "test_mymodul_json",
        "documentation": {}
    },
    {
        "label": "test_json_shut_retur_valid_dictionary",
        "kind": 2,
        "importPath": "test_mymodul_json",
        "description": "test_mymodul_json",
        "peekOfCode": "def test_json_shut_retur_valid_dictionary():\n    valid_dictionary = mymodule.work_with_db_json_staff_shift(\n        \"staff_position.json\", 'person'\n    )\n    assert len(valid_dictionary) == 1\ndef test_json_not_root__should_return_empty_dict():\n    pass\n    dict = mymodule.work_with_db_json_staff_shift(\n        \"staff_position.json\", ':::')\n    assert len(dict) == 0",
        "detail": "test_mymodul_json",
        "documentation": {}
    },
    {
        "label": "test_json_not_root__should_return_empty_dict",
        "kind": 2,
        "importPath": "test_mymodul_json",
        "description": "test_mymodul_json",
        "peekOfCode": "def test_json_not_root__should_return_empty_dict():\n    pass\n    dict = mymodule.work_with_db_json_staff_shift(\n        \"staff_position.json\", ':::')\n    assert len(dict) == 0\ndef test_3_line_json_shut_retur_3_itiems():\n    line_test = mymodule.work_with_db_json_staff_shift(\n        \"staff_name_surname.json\", 'person')\n    assert len(line_test) == 3\ndef test_1_line_json_shut_retur_1_itiems():",
        "detail": "test_mymodul_json",
        "documentation": {}
    },
    {
        "label": "test_3_line_json_shut_retur_3_itiems",
        "kind": 2,
        "importPath": "test_mymodul_json",
        "description": "test_mymodul_json",
        "peekOfCode": "def test_3_line_json_shut_retur_3_itiems():\n    line_test = mymodule.work_with_db_json_staff_shift(\n        \"staff_name_surname.json\", 'person')\n    assert len(line_test) == 3\ndef test_1_line_json_shut_retur_1_itiems():\n    test_1_line = mymodule.work_with_db_json_staff_shift(\n        \"staff_position.json\", 'person'\n    )\n    assert len(test_1_line) == 1",
        "detail": "test_mymodul_json",
        "documentation": {}
    },
    {
        "label": "test_1_line_json_shut_retur_1_itiems",
        "kind": 2,
        "importPath": "test_mymodul_json",
        "description": "test_mymodul_json",
        "peekOfCode": "def test_1_line_json_shut_retur_1_itiems():\n    test_1_line = mymodule.work_with_db_json_staff_shift(\n        \"staff_position.json\", 'person'\n    )\n    assert len(test_1_line) == 1",
        "detail": "test_mymodul_json",
        "documentation": {}
    },
    {
        "label": "work_with_db_jsql_staff_shift",
        "kind": 2,
        "importPath": "test_mymodul_sql",
        "description": "test_mymodul_sql",
        "peekOfCode": "def work_with_db_jsql_staff_shift():\n    assert mymodule.NAME == \"mymodule\"\ndef test_empty_sql_shut_return_empty_dictionary():\n    test_empty_sql = mymodule.work_with_sql_lite_db_files(\n        \"shift.db\",\n        'time_table'\n        'day'\n        'time'\n    )\n    assert len(test_empty_sql) == 7",
        "detail": "test_mymodul_sql",
        "documentation": {}
    },
    {
        "label": "test_empty_sql_shut_return_empty_dictionary",
        "kind": 2,
        "importPath": "test_mymodul_sql",
        "description": "test_mymodul_sql",
        "peekOfCode": "def test_empty_sql_shut_return_empty_dictionary():\n    test_empty_sql = mymodule.work_with_sql_lite_db_files(\n        \"shift.db\",\n        'time_table'\n        'day'\n        'time'\n    )\n    assert len(test_empty_sql) == 7\ndef test_not_empty_sql_shut_retur_not_emthy_dictionary():\n    staff_shift = mymodule. work_with_sql_lite_db_files(",
        "detail": "test_mymodul_sql",
        "documentation": {}
    },
    {
        "label": "test_not_empty_sql_shut_retur_not_emthy_dictionary",
        "kind": 2,
        "importPath": "test_mymodul_sql",
        "description": "test_mymodul_sql",
        "peekOfCode": "def test_not_empty_sql_shut_retur_not_emthy_dictionary():\n    staff_shift = mymodule. work_with_sql_lite_db_files(\n        \"staff_shift.db\",\n        'time_table',\n        'User_id',\n        'day'\n    )\n    assert staff_shift(\"SELECT * FROM time_table\") == 7\ndef test_sql_valid_shut_return_valid_dictionary():\n    persons = mymodule.work_with_sql_lite_db_files(",
        "detail": "test_mymodul_sql",
        "documentation": {}
    },
    {
        "label": "test_sql_valid_shut_return_valid_dictionary",
        "kind": 2,
        "importPath": "test_mymodul_sql",
        "description": "test_mymodul_sql",
        "peekOfCode": "def test_sql_valid_shut_return_valid_dictionary():\n    persons = mymodule.work_with_sql_lite_db_files(\n        \"staff_shift.db\",\n        'staff_name_surname',\n        'Name',\n        'Surname'\n    )\n    assert persons['Denis'] == 'Petrov'\n    assert persons['Tania'] == 'Bal'\n    assert persons['Lana'] == 'Mel'",
        "detail": "test_mymodul_sql",
        "documentation": {}
    },
    {
        "label": "test_sql_shut_retur_valid_dictionary",
        "kind": 2,
        "importPath": "test_mymodul_sql",
        "description": "test_mymodul_sql",
        "peekOfCode": "def test_sql_shut_retur_valid_dictionary():\n    staff = mymodule.work_with_sql_lite_db_files(\n        \"staff_shift.db\",\n        'staff_position',\n        'Name',\n        'Position'\n    )\n    assert staff[\"Tomas\"] == 'Web-Developer'\ndef test_sql_have_to_return_empty_dict():\n    test_sql_have_to_return = mymodule.work_with_sql_lite_db_files(",
        "detail": "test_mymodul_sql",
        "documentation": {}
    },
    {
        "label": "test_sql_have_to_return_empty_dict",
        "kind": 2,
        "importPath": "test_mymodul_sql",
        "description": "test_mymodul_sql",
        "peekOfCode": "def test_sql_have_to_return_empty_dict():\n    test_sql_have_to_return = mymodule.work_with_sql_lite_db_files(\n        \"staff_shift.db\",\n        'time_table',\n        'day',\n        'time_shift'\n        )\n    assert len(test_sql_have_to_return) == 7\ndef test_3_line_in_sql_dict():\n    test_3_line = mymodule.work_with_sql_lite_db_files(",
        "detail": "test_mymodul_sql",
        "documentation": {}
    },
    {
        "label": "test_3_line_in_sql_dict",
        "kind": 2,
        "importPath": "test_mymodul_sql",
        "description": "test_mymodul_sql",
        "peekOfCode": "def test_3_line_in_sql_dict():\n    test_3_line = mymodule.work_with_sql_lite_db_files(\n        \"staff_shift.db\",\n        'staff_name_surname',\n        'Name',\n        'Surname'\n        )\n    assert len(test_3_line) == 3\ndef test_sql_have_to_return_1_key():\n    test_sql = mymodule.work_with_sql_lite_db_files(",
        "detail": "test_mymodul_sql",
        "documentation": {}
    },
    {
        "label": "test_sql_have_to_return_1_key",
        "kind": 2,
        "importPath": "test_mymodul_sql",
        "description": "test_mymodul_sql",
        "peekOfCode": "def test_sql_have_to_return_1_key():\n    test_sql = mymodule.work_with_sql_lite_db_files(\n        \"staff_shift.db\",\n        'staff_position',\n        'Name',\n        'Position'\n    )\n    assert len(test_sql) == 1",
        "detail": "test_mymodul_sql",
        "documentation": {}
    },
    {
        "label": "test_modul_name_is_valid",
        "kind": 2,
        "importPath": "test_mymodul_txt",
        "description": "test_mymodul_txt",
        "peekOfCode": "def test_modul_name_is_valid():\n    assert mymodule.NAME == \"mymodule\"\ndef test_empty_file_shut_return_empty_dictionary():\n    dict_empty = mymodule.open_staff_file(\n        \"test_function/staff_empty_file.txt\", ':')\n    assert len(dict_empty) == 0\ndef test_not_emthy_file_shut_retur_not_emthy_dictionary():\n    file_with_data = mymodule.open_staff_file(\"staff_week_day.txt\", ':')\n    assert file_with_data['Wednesday'] == '10.am-5.pm\\n'\ndef test_delimiter_comma_shut_retur_valid_dictionary():",
        "detail": "test_mymodul_txt",
        "documentation": {}
    },
    {
        "label": "test_empty_file_shut_return_empty_dictionary",
        "kind": 2,
        "importPath": "test_mymodul_txt",
        "description": "test_mymodul_txt",
        "peekOfCode": "def test_empty_file_shut_return_empty_dictionary():\n    dict_empty = mymodule.open_staff_file(\n        \"test_function/staff_empty_file.txt\", ':')\n    assert len(dict_empty) == 0\ndef test_not_emthy_file_shut_retur_not_emthy_dictionary():\n    file_with_data = mymodule.open_staff_file(\"staff_week_day.txt\", ':')\n    assert file_with_data['Wednesday'] == '10.am-5.pm\\n'\ndef test_delimiter_comma_shut_retur_valid_dictionary():\n    persons = mymodule.open_staff_file(\n        \"test_function/staff_name_surname.txt\", ','",
        "detail": "test_mymodul_txt",
        "documentation": {}
    },
    {
        "label": "test_not_emthy_file_shut_retur_not_emthy_dictionary",
        "kind": 2,
        "importPath": "test_mymodul_txt",
        "description": "test_mymodul_txt",
        "peekOfCode": "def test_not_emthy_file_shut_retur_not_emthy_dictionary():\n    file_with_data = mymodule.open_staff_file(\"staff_week_day.txt\", ':')\n    assert file_with_data['Wednesday'] == '10.am-5.pm\\n'\ndef test_delimiter_comma_shut_retur_valid_dictionary():\n    persons = mymodule.open_staff_file(\n        \"test_function/staff_name_surname.txt\", ','\n        )\n    assert persons.get(\"Denis\") == \"Petrov\\n\"\n    assert persons.get(\"Tania\") == \"Bal\\n\"\n    assert persons.get(\"Lana\") == \"Mel\"",
        "detail": "test_mymodul_txt",
        "documentation": {}
    },
    {
        "label": "test_delimiter_comma_shut_retur_valid_dictionary",
        "kind": 2,
        "importPath": "test_mymodul_txt",
        "description": "test_mymodul_txt",
        "peekOfCode": "def test_delimiter_comma_shut_retur_valid_dictionary():\n    persons = mymodule.open_staff_file(\n        \"test_function/staff_name_surname.txt\", ','\n        )\n    assert persons.get(\"Denis\") == \"Petrov\\n\"\n    assert persons.get(\"Tania\") == \"Bal\\n\"\n    assert persons.get(\"Lana\") == \"Mel\"\ndef test_delimiter_slash_shut_retur_valid_dictionary():\n    valid_dictionary = mymodule.open_staff_file(\n        \"test_function/staff_position.txt\", '/'",
        "detail": "test_mymodul_txt",
        "documentation": {}
    },
    {
        "label": "test_delimiter_slash_shut_retur_valid_dictionary",
        "kind": 2,
        "importPath": "test_mymodul_txt",
        "description": "test_mymodul_txt",
        "peekOfCode": "def test_delimiter_slash_shut_retur_valid_dictionary():\n    valid_dictionary = mymodule.open_staff_file(\n        \"test_function/staff_position.txt\", '/'\n        )\n    assert valid_dictionary['Tomas'] == 'web developer'\ndef test_not_valid_delimiter_shud_trow_error():\n    dict = mymodule.open_staff_file(\"test_function/staff_position.txt\", ':::')\n    assert len(dict) == 0\ndef test_3_line_file_shut_retur_3_itiems():\n    line_test = mymodule.open_staff_file(",
        "detail": "test_mymodul_txt",
        "documentation": {}
    },
    {
        "label": "test_not_valid_delimiter_shud_trow_error",
        "kind": 2,
        "importPath": "test_mymodul_txt",
        "description": "test_mymodul_txt",
        "peekOfCode": "def test_not_valid_delimiter_shud_trow_error():\n    dict = mymodule.open_staff_file(\"test_function/staff_position.txt\", ':::')\n    assert len(dict) == 0\ndef test_3_line_file_shut_retur_3_itiems():\n    line_test = mymodule.open_staff_file(\n        \"test_function/staff_name_surname.txt\", ',')\n    assert len(line_test) == 3\ndef test_1_line_file_shut_retur_1_itiems():\n    test_1_line = len(mymodule.open_staff_file(\n        \"test_function/staff_position.txt\", '/')",
        "detail": "test_mymodul_txt",
        "documentation": {}
    },
    {
        "label": "test_3_line_file_shut_retur_3_itiems",
        "kind": 2,
        "importPath": "test_mymodul_txt",
        "description": "test_mymodul_txt",
        "peekOfCode": "def test_3_line_file_shut_retur_3_itiems():\n    line_test = mymodule.open_staff_file(\n        \"test_function/staff_name_surname.txt\", ',')\n    assert len(line_test) == 3\ndef test_1_line_file_shut_retur_1_itiems():\n    test_1_line = len(mymodule.open_staff_file(\n        \"test_function/staff_position.txt\", '/')\n                      )\n    assert test_1_line == 1",
        "detail": "test_mymodul_txt",
        "documentation": {}
    },
    {
        "label": "test_1_line_file_shut_retur_1_itiems",
        "kind": 2,
        "importPath": "test_mymodul_txt",
        "description": "test_mymodul_txt",
        "peekOfCode": "def test_1_line_file_shut_retur_1_itiems():\n    test_1_line = len(mymodule.open_staff_file(\n        \"test_function/staff_position.txt\", '/')\n                      )\n    assert test_1_line == 1",
        "detail": "test_mymodul_txt",
        "documentation": {}
    },
    {
        "label": "work_with_db_xml_staff_shift",
        "kind": 2,
        "importPath": "test_mymodul_xml",
        "description": "test_mymodul_xml",
        "peekOfCode": "def work_with_db_xml_staff_shift():\n    assert mymodule.NAME == \"mymodule\"\ndef test_empty_xml_shut_return_empty_dictionary():\n    dict_empty = mymodule.work_with_db_xml_staff_shift(\n        \"staff_empty_file.xml\", 'key_name', 'val_name')\n    assert len(dict_empty) == 0\ndef test_xml_valid_shut_return_valid_dictionary():\n    persons = mymodule.work_with_db_xml_staff_shift(\n        \"staff_name_surname.xml\", 'name', 'surname')\n    assert len(persons) == 3",
        "detail": "test_mymodul_xml",
        "documentation": {}
    },
    {
        "label": "test_empty_xml_shut_return_empty_dictionary",
        "kind": 2,
        "importPath": "test_mymodul_xml",
        "description": "test_mymodul_xml",
        "peekOfCode": "def test_empty_xml_shut_return_empty_dictionary():\n    dict_empty = mymodule.work_with_db_xml_staff_shift(\n        \"staff_empty_file.xml\", 'key_name', 'val_name')\n    assert len(dict_empty) == 0\ndef test_xml_valid_shut_return_valid_dictionary():\n    persons = mymodule.work_with_db_xml_staff_shift(\n        \"staff_name_surname.xml\", 'name', 'surname')\n    assert len(persons) == 3\ndef test_xml_shut_retur_valid_dictionary():\n    valid_dictionary = mymodule.work_with_db_xml_staff_shift(",
        "detail": "test_mymodul_xml",
        "documentation": {}
    },
    {
        "label": "test_xml_valid_shut_return_valid_dictionary",
        "kind": 2,
        "importPath": "test_mymodul_xml",
        "description": "test_mymodul_xml",
        "peekOfCode": "def test_xml_valid_shut_return_valid_dictionary():\n    persons = mymodule.work_with_db_xml_staff_shift(\n        \"staff_name_surname.xml\", 'name', 'surname')\n    assert len(persons) == 3\ndef test_xml_shut_retur_valid_dictionary():\n    valid_dictionary = mymodule.work_with_db_xml_staff_shift(\n        \"staff_position.xml\", 'name', 'position')\n    assert len(valid_dictionary) == 1\ndef test_xml_shut_return_exist_day_and_time():\n    file_with_data = mymodule.work_with_db_xml_staff_shift(",
        "detail": "test_mymodul_xml",
        "documentation": {}
    },
    {
        "label": "test_xml_shut_retur_valid_dictionary",
        "kind": 2,
        "importPath": "test_mymodul_xml",
        "description": "test_mymodul_xml",
        "peekOfCode": "def test_xml_shut_retur_valid_dictionary():\n    valid_dictionary = mymodule.work_with_db_xml_staff_shift(\n        \"staff_position.xml\", 'name', 'position')\n    assert len(valid_dictionary) == 1\ndef test_xml_shut_return_exist_day_and_time():\n    file_with_data = mymodule.work_with_db_xml_staff_shift(\n        \"staff_weekend.xml\", 'day', 'time')\n    assert len(file_with_data) == 2\ndef test_7_line_xml_shut_retur_7_itiems():\n    line_test = mymodule.work_with_db_xml_staff_shift(",
        "detail": "test_mymodul_xml",
        "documentation": {}
    },
    {
        "label": "test_xml_shut_return_exist_day_and_time",
        "kind": 2,
        "importPath": "test_mymodul_xml",
        "description": "test_mymodul_xml",
        "peekOfCode": "def test_xml_shut_return_exist_day_and_time():\n    file_with_data = mymodule.work_with_db_xml_staff_shift(\n        \"staff_weekend.xml\", 'day', 'time')\n    assert len(file_with_data) == 2\ndef test_7_line_xml_shut_retur_7_itiems():\n    line_test = mymodule.work_with_db_xml_staff_shift(\n        \"staff_week_day.xml\", 'day', 'time')\n    assert len(line_test) == 7\ndef test_1_line_xml_shut_retur_1_itiems():\n    line_test = mymodule.work_with_db_xml_staff_shift(",
        "detail": "test_mymodul_xml",
        "documentation": {}
    },
    {
        "label": "test_7_line_xml_shut_retur_7_itiems",
        "kind": 2,
        "importPath": "test_mymodul_xml",
        "description": "test_mymodul_xml",
        "peekOfCode": "def test_7_line_xml_shut_retur_7_itiems():\n    line_test = mymodule.work_with_db_xml_staff_shift(\n        \"staff_week_day.xml\", 'day', 'time')\n    assert len(line_test) == 7\ndef test_1_line_xml_shut_retur_1_itiems():\n    line_test = mymodule.work_with_db_xml_staff_shift(\n        \"staff_position.xml\", 'name', 'position'\n    )\n    assert len(line_test) == 1",
        "detail": "test_mymodul_xml",
        "documentation": {}
    },
    {
        "label": "test_1_line_xml_shut_retur_1_itiems",
        "kind": 2,
        "importPath": "test_mymodul_xml",
        "description": "test_mymodul_xml",
        "peekOfCode": "def test_1_line_xml_shut_retur_1_itiems():\n    line_test = mymodule.work_with_db_xml_staff_shift(\n        \"staff_position.xml\", 'name', 'position'\n    )\n    assert len(line_test) == 1",
        "detail": "test_mymodul_xml",
        "documentation": {}
    }
]